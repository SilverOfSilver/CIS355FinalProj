<div id="dashboard-container">
    <div id="info-menu-container">
        <h1>Dashboard</h1>
        <p>{{username}}</p>
        <p>Faction: {{faction}}</p>
        <p>Resources: {{resources}}</p>

        <div id="navigation-menu">
            <button id="move-up">Up</button>
            <button id="move-left">Left</button>
            <button id="move-right">Right</button>
            <button id="move-down">Down</button>
        </div>

        <div id="tile-info">
            <h2>Tile Info</h2>
            <p id="tile-id">ID: N/A</p>
            <p id="tile-terrain">Terrain: N/A</p>
            <p id="tile-resources">Resources: N/A</p>
        </div>

        <a href="/auth/logout">Logout</a>
    </div>

    <div id="map-container">
    </div>

    <div id="tile-details-container">
        <h2>Tile Details</h2>
        <p id="tile-units">Units: N/A</p>
        <p id="tile-buildings">Buildings: N/A</p>
        <form id="queue-action-form">
            <h3>Queue Construction</h3>
            <label for="action-type">Action Type:</label>
            <select id="action-type" name="action_type">
                <option value="build_unit">Build Unit</option>
                <option value="build_building">Build Building</option>
            </select>
            <br>
            <label for="target">Target:</label>
            <input type="text" id="target" name="target" placeholder="e.g., Barracks or Soldier" required>
            <br>
            <button type="submit">Queue Action</button>
        </form>
    </div>

    <div id="action-queue-container">
        <h2>Action Queue</h2>
        <ul id="action-queue-list">
            <li>No actions queued.</li>
        </ul>
        <button id="process-actions-button">Process Actions</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const mapContainer = document.getElementById('map-container');
        const moveUpButton = document.getElementById('move-up');
        const moveDownButton = document.getElementById('move-down');
        const moveLeftButton = document.getElementById('move-left');
        const moveRightButton = document.getElementById('move-right');
        const tileInfo = {
            id: document.getElementById('tile-id'),
            terrain: document.getElementById('tile-terrain'),
            resources: document.getElementById('tile-resources'),
        };

        const tileDetails = {
            units: document.getElementById('tile-units'),
            buildings: document.getElementById('tile-buildings'),
        };

        const mapWidth = 512;
        let offsetX = 0;
        let offsetY = 0;
        let selectedX = 0;
        let selectedY = 0;
        let selectedTile = null;

        const fetchTiles = async (x, y) => {
            const limit = 256;

            try {
                const response = await fetch(`/map?x=${x}&y=${y}&limit=${limit}`);
                const tiles = await response.json();
                renderTiles(tiles);
            } catch (error) {
                console.error('Error fetching tiles:', error);
            }
        };

        const fetchTileDetails = async (tileId) => {
            try {
                const response = await fetch(`/map/details?tileId=${tileId}`);
                const details = await response.json();

                tileDetails.units.textContent = `Units: ${details.units.length > 0 ? details.units.map(unit => unit.unit_type).join(', ') : 'None'}`;
                tileDetails.buildings.textContent = `Buildings: ${details.buildings.length > 0 ? details.buildings.map(building => building.building_type).join(', ') : 'None'}`;
            } catch (error) {
                console.error('Error fetching tile details:', error);
            }
        };

        const renderTiles = (tiles) => {
            mapContainer.innerHTML = '';
            const gridSize = Math.ceil(Math.sqrt(tiles.length));
            mapContainer.style.gridTemplateColumns = `repeat(${gridSize}, 50px)`;

            tiles.forEach(tile => {
                const tileDiv = document.createElement('div');
                tileDiv.className = `tile ${tile.terrain_type}`;
                tileDiv.textContent = tile.terrain_type;
                tileDiv.dataset.id = tile.tile_id;
                tileDiv.dataset.terrain = tile.terrain_type;
                tileDiv.dataset.resources = tile.resources;

                const tileX = tile.tile_id % mapWidth;
                const tileY = Math.floor(tile.tile_id / mapWidth);

                if (tileX === selectedX && tileY === selectedY) {
                    selectedTile = tileDiv;
                    tileDiv.style.border = '2px solid red';
                }

                tileDiv.addEventListener('click', () => {
                    if (selectedTile) {
                        selectedTile.style.border = '';
                    }
                    selectedTile = tileDiv;
                    tileDiv.style.border = '2px solid red';

                    selectedX = tileX;
                    selectedY = tileY;

                    tileInfo.id.textContent = `ID: ${tile.tile_id}`;
                    tileInfo.terrain.textContent = `Terrain: ${tile.terrain_type}`;
                    tileInfo.resources.textContent = `Resources: ${tile.resources}`;

                    fetchTileDetails(tile.tile_id);
                });

                mapContainer.appendChild(tileDiv);
            });
        };

        const move = (dx, dy) => {
            offsetX = Math.min(495, Math.max(0, offsetX + dx));
            offsetY = Math.min(495, Math.max(0, offsetY + dy));

            fetchTiles(offsetX, offsetY);
        };

        moveUpButton.addEventListener('click', () => move(0, -16));
        moveDownButton.addEventListener('click', () => move(0, 16));
        moveLeftButton.addEventListener('click', () => move(-16, 0));
        moveRightButton.addEventListener('click', () => move(16, 0));

        fetchTiles(offsetX, offsetY);

        const queueActionForm = document.getElementById('queue-action-form');
        const actionQueueList = document.getElementById('action-queue-list');
        const processActionsButton = document.getElementById('process-actions-button');

        const fetchActionQueue = async () => {
            try {
                const response = await fetch('/map/action-queue');
                const actions = await response.json();

                actionQueueList.innerHTML = '';
                if (actions.length === 0) {
                    actionQueueList.innerHTML = '<li>No actions queued.</li>';
                } else {
                    actions.forEach(action => {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${action.action_type} - Target: ${JSON.stringify(action.target)}`;

                        const deleteButton = document.createElement('button');
                        deleteButton.textContent = 'Delete';
                        deleteButton.addEventListener('click', async () => {
                            try {
                                const response = await fetch(`/map/action-queue/${action.action_id}`, { method: 'DELETE' });
                                if (response.ok) {
                                    alert('Action deleted successfully!');
                                    fetchActionQueue();
                                } else {
                                    const error = await response.json();
                                    alert(`Error: ${error.message}`);
                                }
                            } catch (error) {
                                console.error('Error deleting action:', error);
                                alert('An error occurred while deleting the action.');
                            }
                        });

                        const editButton = document.createElement('button');
                        editButton.textContent = 'Edit';
                        editButton.addEventListener('click', () => {
                            const newActionType = prompt('Enter new action type:', action.action_type);
                            const newTarget = prompt('Enter new target:', JSON.stringify(action.target));

                            if (newActionType && newTarget) {
                                fetch(`/map/action-queue/${action.action_id}`, {
                                    method: 'PUT',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ action_type: newActionType, target: JSON.parse(newTarget) }),
                                })
                                    .then(response => {
                                        if (response.ok) {
                                            alert('Action updated successfully!');
                                            fetchActionQueue();
                                        } else {
                                            return response.json().then(error => {
                                                alert(`Error: ${error.message}`);
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error updating action:', error);
                                        alert('An error occurred while updating the action.');
                                    });
                            }
                        });

                        listItem.appendChild(editButton);
                        listItem.appendChild(deleteButton);
                        actionQueueList.appendChild(listItem);
                    });
                }
            } catch (error) {
                console.error('Error fetching action queue:', error);
            }
        };

        queueActionForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const actionType = document.getElementById('action-type').value;
            const target = document.getElementById('target').value;

            if (!selectedTile) {
                alert('Please select a tile first.');
                return;
            }

            try {
                const response = await fetch('/map/queue-action', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        tileId: selectedTile.dataset.id,
                        action_type: actionType,
                        target,
                    }),
                });

                if (response.ok) {
                    alert('Action queued successfully!');
                    fetchActionQueue();
                } else {
                    const error = await response.json();
                    alert(`Error: ${error.message}`);
                }
            } catch (error) {
                console.error('Error queuing action:', error);
                alert('An error occurred while queuing the action.');
            }
        });

        const processActions = async () => {
            try {
                const response = await fetch('/map/process-actions', { method: 'POST' });
                if (response.ok) {
                    alert('Actions processed successfully!');
                    fetchActionQueue();
                    if (selectedTile) {
                        fetchTileDetails(selectedTile.dataset.id);
                    }
                } else {
                    const error = await response.json();
                    alert(`Error: ${error.message}`);
                }
            } catch (error) {
                console.error('Error processing actions:', error);
                alert('An error occurred while processing actions.');
            }
        };

        processActionsButton.addEventListener('click', processActions);

        fetchActionQueue();
    });
</script>